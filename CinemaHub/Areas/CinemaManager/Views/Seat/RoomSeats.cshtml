@model IEnumerable<Seat>

<style>
    .seat-block {
        width: 45px;
        height: 45px;
        border: 1px solid #ccc;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .seat-block.available:hover {
            cursor: pointer;
            background-color: #ffc107; /* Change this to your desired color for selected seats */
        }

    .available {
        background-color: #007bff; /* Change this to your desired color for selected seats */
        color: #fff;
    }

    .selected {
        background-color: #ffc107; /* Change this to your desired color for selected seats */
        color: #000;
    }

    .unavailable {
        background-color: #ccc;
        color: #000;
    }
</style>

<div class="container my-5">
    <h3 class="text-dark">Room Seats</h3>
    <hr />
    <div class="table-responsive">
        <!-- Display Room Layout-->
        <table class="table table-bordered w-100 text-center">
            <thead>
                <tr>
                    <th colspan="100%" class="align-content-center">
                        <div class="d-flex justify-content-center text-black">
                            <hr style="height: 10px; width: 50%;" />
                        </div>
                    </th>
                </tr>
                <tr>
                    <th></th>
                    @{
                        int maxCol = 0;
                        if (Model.Count() > 0)
                        {
                            maxCol = Model.Max(s => int.Parse(s.SeatName.Substring(1)));
                        }


                        @*for (int col = 1; col <= maxCol; col++)
                    {
                    <th>@col</th>
                    }*@
                    }
                </tr>
            </thead>

            <tbody>
                @{
                    var rowLetters = Model.Select(s => s.SeatName.Substring(0, 1)).Distinct().OrderBy(c => c);
                }

                @foreach (var rowLetter in rowLetters)
                {
                    <tr>
                        <th>@rowLetter</th>
                        @for (int col = 1; col <= maxCol; col++)
                        {
                            var seat = Model.FirstOrDefault(s => s.SeatName == rowLetter + col);

                            var seatId = seat != null ? seat.SeatID : Guid.Empty;
                            <td>
                                @if (seat != null)
                                {
                                    <div class="seat-block w-100  @(seat.SeatStatus == "LOCKED" ? "unavailable" : "available")" id="@(seatId)">
                                        <span>@(rowLetter + col)</span>
                                    </div>
                                }

                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>

        <div class="d-flex w-100 my-5 justify-content-center">
            <a asp-area="CinemaManager" asp-controller="Seat" asp-action="Create" asp-route-room_id="@ViewData["room_id"]" class="btn btn-success mx-2"><i class="bi bi-plus-circle"></i> Add New Seat</a>
            <a asp-area="CinemaManager" asp-controller="Seat" asp-action="Index" class="btn btn-outline-secondary mx-2"><i class="bi bi-plus-circle"></i> Back To Seat List</a>
        </div>
    </div>

    <hr class="mx-5" />
    <div class="table-responsive">
        <table id="seatTable" class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Seat Name</th>
                    <th>Seat Status</th>
                    <th></th>
                </tr>
            </thead>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            {
                $('#seatTable').DataTable({
                    "data": @Html.Raw(Json.Serialize(Model)),
                    "columns": [
                        { "data": "seatName" },
                        {
                            "data": "seatStatus",
                            "render": function (data) {
                                var seatStatus = data;
                                if (seatStatus === "LOCKED") {
                                    return "LOCKED"
                                } else {
                                    return "AVAILABLE";
                                }
                            },
                        },
                        {
                            "data": "seatID",
                            "render": function (data) {
                                return `
                                            <a href="/CinemaManager/Seat/Update?seat_id=${data}"
                                            class="btn btn-dark mx-2"> <i class="bi bi-pencil-square"></i></a>
                                            <a onClick=Delete('/CinemaManager/Seat/Delete?seat_id=${data}')
                                            class="btn btn-danger mx-2"> <i class="bi bi-trash-fill"></i></a>
                                       `
                            },
                        }
                    ],
                    "responsive": true
                });
            }
        });


        function Delete(url) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: url,
                        type: 'DELETE',
                        success: function (data) {
                            if (data.success) {
                                location.reload();
                                Swal.fire(
                                    'Deleted!',
                                    'This delete has been deleted.',
                                    'success'
                                )
                                // toastr.success(data.message);
                            } else {
                                // toastr.error(data.message);
                            }
                        }
                    })
                }
            })
        }
    </script>

}
